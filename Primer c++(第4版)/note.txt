

windows 会产生一个a.exe的可执行文件

unix编译器会产生一个a.out的文件

在unix系统中，即使在当前目录，有时也必须指定文件所在的目录

"." 后面的斜杠表明文件处于当前目录下

让问main函数的返回值的方式和系统有关


查看所用的编译器文档，了解它所用的文件命名规范


修改程序使其返回-1.返回值-1通常作为程序运行失败的指示器


1.2  初探输入、输出


c++并没有直接定义进行输入或输出(IO)的任何语句，这种功能功能由标准哭提供的。
IO标准库提供了大量的shezhi
大部分例子处理格式化输入和输出的iostream库

iostream库的基础是两种命名为istream和ostream的类型，分别表示输入流和输出流

流是指要从某种IO设备上读入或写出的字符序列。
流师徒说明字符是随着时间顺序生成或消耗的


1.2.1  标准输入与输出对象

标准库定义了4个IO对象

1. 处理输入时实用命名为cin（读作see-in）的istream类型对象。这个对象也称为标准输入
2.处理输出时使用命名为cout(读作see-out)的ostream类型对象，这个对象也称为标准输出
3. 标准错误，cerr(读作see-err)，通常用来输出警告和错误信息给程序的使用者
4.clog(读作see-log)，clog对象用于产生程序执行的一般信息


一般情况下，系统将这些对象与执行程序的窗口联系起来
当我们从cin读入时，数据从执行程序的窗口读入，当写到cin,cerr或clog时，输出
写至同一窗口。
运行程序时，大部分操作系统都提供了重定向输入或输出流的方法。利用重定向可以将这些流与所
选择的文件联系起来

1.2.2  一个实用IO库的程序

#include <iostream>

告诉编译器要使用iostream库。尖括号的名字是一个。头文件，
程序实用库工具时必须包含相关的头文件。
#include指示必须单独写成一行----头文件名和#include必须在同一行。

通常，#include指示应出现在任何函数的外部。习惯上，程序的所有#include指示都在文件开头部分出现


写入到流


main函数体中第一条语句执行了一个表达式。
c++中，一个表达式由一个或几个操作数和通常是一个操作符组成。该语句的表达式使用输出操作符(<< 操作符)
在标准输出上输出提示语：

std:: cout << "Enter two numbers:" << std::endl;

这个语句用了两次输出操作符。每个输出操作符实例都接受两个操作数：
左操作数必须是ostream对象；右操作数是要输出的值。
操作符将其右操作数写到作为其左操作数的ostream对象


c++中，每个表达式都会产生一个结果，通常是将操作符作用到其操作数产生的值。
当操作符是输出操作符时，结果是左操作数的值。输出操作返回的值是输出流本身

既然输出操作符返回的是其左操作数，那么我们就可以将输出请求链接在一起


endl是一个特殊值，成为操纵符，将它写入输出流时，具有输出换行的效果，并刷新与设备相关联的缓冲区。
通过刷新缓冲区，用户可立即看到写入到流中的输出


程序员经常在调试过程中插入输出语句，这些语句都应该刷新输出流。
忘记刷新输出流可能会造成输出流停留在缓冲区中，如果程序崩溃，将会导致程序错误推断崩溃的位置



使用标准库中的名字


std::cout   std::endl

前缀std::表明cout和endl是定义在命名空间std中的。使用命名空间程序员可以避免与库中定义的名字
相同而引起冲突

因为标准库定义的名字是定义在命名空间中，所以我们可以按自己的意图实用相同的名字




标准库使用命名空间的副作用是，当我们实用标准库中的名字时，必须显式地表达出使用的是命名空间std下的
名字。std::cout的写法使用了作用域操作符(::操作符)，表示实用的是定义在命名空间std中的cout

读入流

p24

在输出提示语后，将读入用户输入的数据。先定义两个名为v1和v2的变量来保存输入：

int v1,v2;

将这些变量定义为int类型，int类型是一种代表整数值的内置类型。这些变量为初始化，表示没有赋给
他们初始值。这些变量在首次时候时会读入一个值，因此没有初始值

下一条语句读取输入：

std:: cin >> v1 >> v2;

输入操作符  (>> 操作符) 行为与输出操作符相似。它接受一个istream对象作为其左操作符数，
接受一个对象作为其右操作数，它从istream操作数读取数据病保存到右操作数中。想输出操作符一样，
输入操作符返回其左操作数作为结果。由于输入操作符返回其左操作数，我们可以将输入请求
序列合并成单个语句。 这个输入操作等价于：

std:: cin>> v1;
std:: cin>> v2;


输入操作的效果是从标准输入读取两个值，将第一个存放在v1中，第二个存放在v2中。


完成程序

它将每个操作数输出到标准输出。有趣的是操作数并不都是同一类型的值，有些操作数是字符串字面值

"the sum of"

其他是各种int值， 如v1,v2以及对算数表达式 v1+v2

求值的结果。iostream库定义了接受全部内置类型的输入输出操作符版本


在写c++程序时，大部分出现空格符的地方可用换行符替代。这条规则的一个例外是字符串字面值中的空格
符不能用换行字符代替。
另一个例外是空格符不允许出现在预处理提示中。

关键概念： 已初始化变量和未初始化变量


在c++中，有初始化的概念


已初始化变量是指变量在定义时就给定一个值。未初始化变量则未给定初始值


int val1 = 0;
int val2 ;



定义变量时，应该给变量赋初始值，除非确定将变量用于其他意图之前会覆盖这个初值。如果
不能保证读取变量之前重置变量，就应该初始化变量。。



1.3 关于注释 


注释可以帮助其他人阅读程序，通常用于括号算法，确认变量的用途或阐明难以理解的代码段。


c++中有单行注释和成对注释两种类型的注释。 单行注释一双斜线(//)开头，行中
处于双斜线右边的内容是注释，被编译器忽略

还可以用d定界符/**/

任何允许有制表符，空格或换行符的地方都允许放注释对。


注释对不可嵌套

1.4 控制结构

1.4.1  while语句

while语句提供了迭代执行功能。可以用while语句编写一个1到10求和的程序

块是被花括号括起来的语句序列。c++中，块可用于任何可以用于一条语句的地方。


1.4.2  for语句

在while循环中，我们使用变量val来控制循环执行次数。每次执行while语句，
都要测试val的值。

在for循环之前，我们定义sum并赋0值.用于迭代的变量val被定义为for语句自身的一部分

包含for语句头和语句体两部分。for语句头控制for语句体的执行次数。for语句头由三部分组成：
一个初始化语句，一个条件，一个表达式。

在标准化之前的c++中，定义在for语句头的名字在for循环外是可访问的。


再谈编译

编译器的部分工作是寻找程序代码中的错误。编译器不能查出程序的意义是否正确，
但它可以查出程序形式上的错误

1.语法错误
2.类型错误。c++中每个数据项都有其相关联的类型。如，值10是一个整数。用双引号标
起来的单词"hello" 是字符串字面值。
类型错误的一个实例是传递了字符串字面值个应该得到整型参数的函数

2.声明错误。c++程序中实用的每个名字必须在使用之前声明。没有声明名字通常会导致错误信息。

最常见的两种声明错误，是从标准库中访问名字时忘记使用"std::",以及由于疏忽而拼错标识符名


1.4.3 if语句

1.4.4 读入未知数目的输入

还可以允许用户指定一组数求和。这种情况下，我们不知道要对多少个数求和，而是要一直
读数直到程序输入结束。输入结束时，程序将总和写到标准输出

从键盘输入文件结束符

操作系统实用不同的值作为文件结束符。

windows 以 ctrl + z 来输入文件结束符

unix系统中，包括max ,通常实用ctrl + d

1.5 类的简介


c++中我们通过定义类来定义自己的数据结构。
类机制是c++中最重要的特征之一。c++设计的主要焦点就是使
所定义的类类型的行为可以想内置类型一样自然。

使用类时我们需要回答三个问题：

1.类的名字是什么？
2.它在哪里定义？
3.它支持什么操作

对于书店问题，我们假定类命名为Sales_item 且类定义在命名为Sales_item.h的头文件中


1.5.1 Sales_item类

我们需要知道这个类提供什么操作

像IO一样的库工具，必须包含相关的头文件。
对于自定义的类，必须使得编译器可以访问和类相关的定义。
一般来说，我们将类定义放入一个文件中，要使用该类的任何程序都必须包含这个文件


依据惯例，类类型存储在一个文件中，其文件名如同程序的源文件名一样
由文件名和文件后缀两部分组成。通常文件名和定义在头文件中的类名是一样的
通常后缀是.h,

假定我们的类定义在名为Sales_item.h 的文件中


Sales_item对象上的操作


每个类定义一种类型，类型名与类名相同。

我们的Sales_item类定义了一种命名为Sales_item的类型。像实用内置类型一样，可以定义
类类型的变量

Sales_item item;
就表示item是类型 Sales_item的一个对象。

除了可以定义Sales_item类型的变量，我们还可以执行Sales_item对象的以下操作：

加法操作符，+，将两个Sales_item相加
输入操作符，<< ,来读取一个Sales_item对象
输出操作符，>>,来输出一个Sales_item对象
赋值操作符，=，将一个Sales_item对象赋值给另一个Sales_item对象
调用same_isbn函数确定两个Sales_item是否是同一本书


读入和写出 Sales_item对象

下面一个程序，从标准输入读取数据，使用该数据建立一个Sales_item对象，
并将该Sales_item对象写到标准输出

iosream头文件由标准库定义，而Sales_item头文件则不是。Sales_item是一种
自定义类型。当使用自定义头文件时，使用“”把头文件名括起来


标准库的头文件用<>括起来，非标准库的头文件用双引号“”括起来

在main函数中，首先定义一个对象，命名为book,用它保存从标准输入读取的数据。
下一条语句读入数据到此对象，第三条语句将它打印到标准输出，
像平常一样紧接着打印endl来刷新缓冲区

类定义行为
1.5.2 初探成员函数

调用命名为item1的Sales_item对象的成员函数，成员函数是由类定义的函数，也称为类方法

成员函数只另一一次，但被视为每个对象的成员。我们将这些操作称为成员函数，是因为它们（通常）在特定对象上操作。

在这个意义上，它们是对象的成员，即使同一类型的所有对象共享同一个定义也是如此

当调用成员函数时，指向函数要操作的对象。使用点操作符(.)

点操作符通过它的左操作数取得右操作数。
点操作符仅用于类类型的对象：左操作必须是类类型的对象，右操作必须指定该类型的成员


点操作符的右操作数不是对象或值，而是成员的名字

通常使用成员函数作为点操作符的右操作数来调用成员函数。执行成员函数和执行其他函数类似：要调用函数，可将调用操作符()
放在函数名之后，调用操作符是一对圆括号，括住传递给函数的实参列表(可能为空)


1.6  c++程序

头文件如何写？

第一部分 基本语言


内置数据类型：如整型，字符型
表达式和语句：表达式和语句用于操纵上述类型的值
变量：程序员可以使用变量对所用的对象命名
控制结构：如if或while,程序员可以使用控制结构有条件地执行或重复执行一组动作
函数：程序员可以使用函数把行为抽象成可调用的计算单元

大多数程序语言采用两种方式对上面的基本特征集进行扩充：允许程序员通过自定义数据类型扩展该语言；
提供一组库例程，这些例程定义了一些并非内置在语言中的实用函数和数据类型


c++中对象的类型决定了该对象可以执行的操作。语句正确与否取决于该语句中对象的类型。

python在运行时才检查语句中对象的类型。相反，c++是静态类型语言，在编译时执行类型检查。
结果是程序中使用某个名字之前，必须先告知编译器该名字的类型

c++中最重要的特征是类(class),程序员可以使用类自定义数据类型，成为类类型(class type),以区别语言的内置类型

掌握c++的第一步是学习语言的基本知识和标准库
第二章，探讨内置数据类型，以及自定义新类型的机制
第三章，引入两种最基本的标准库类型：string,vector
第四章，介绍数组，数组是一种低级的数据结构，内置于c++和其他语言，数组类似于vector对象，但较难实用


第二章 变量和基本类型

类型是所有程序的基础。类型告诉我们数据代表什么意思以及可以对数据执行哪些操作


c++定义了几种基本类型：字符型，整型，浮点型等

c++还提供了可用于自定义数据类型的机制，标准库正式利用这些机制定义了更复杂的类型
比如可变长字符串 string,vector等

类型确定了数据和操作在程序中的意义


c++中对类型的支持是非常广泛的：语言本身定义了一组基本类型和修改已有类型的方法，还
提供了一组特征用于自定义类型。


2.1  基本内置类型


c++定义了一组表示整数，浮点数，单个字符和布尔值的算术类型，另外还定义了一种称为void
的特殊类型。void类型没有对应的值，仅用在有限的一些情况下，通常用作无法返回值函数的返回类型


算术类型的存储空间依据机器而定。这里的存储空间是指用来表示该类型的位(bit)数。
c++标准规定了每个算术类型的最小存储空间，但它并不阻止编译器使用更大的存储空间。

事实上，对于int类型，几乎所有的编译器使用的存储空间都比所要求的要大

bool NA
char 8 bits
wchar_t 16 bits
short 16 bits
int 16bits
long 32 bits
float 6 sd
double 10 sd
long double 10 sd

因为位数的不同，这些类型所能表示的最大(最小)值也因机器的不同而不同


2.1.1  整型

表示整数，字符和布尔值的算术类型合称为整形

字符类型有两种：char,wchar_t

char类型保证了有足够的空间，能够存储机器基本字符集中任何字符相应的数值，因此
char类型通常是单个机器字节(byte)

wchar_t 类型用于扩展字符集，比如汉字和日语，这些字符集中的一些字符不嗯给你用单个char表示


short,int,long类型都表示整型值，存储空间的大小不同。

内置类型的机器级表示


c++的内置类型与其在计算机的存储器中的表示方式紧密相关。

计算机以位序列存储数据，每一位存储0或1

让存储具有结构的最基本方法是用块(chunk)处理存储


大多数计算机将存储中的每一个字节和一个称为地址的数关联起来
一旦知道了该地址的值的类型，就知道了表示该类型的值需要多少位
和如何解释这些位

bool类型表示真值true和false.可以将算术类型的任何值赋给bool对象。0值算术类型
代表false,任何非0的值代表true


带符号和无符号类型

除了bool类型外，整型可以是带符号的(signed)也可以是无符号的(unsigned)

带符号类型可以表示正数也可以表示负数(包括0)
而无符号型只能表示大于或等于0的数


整型int,short,long都是默认为带符号型。要获得无符号型则必须指定该类型为unsigned,
比如 unsigned long. 
unsigned int 类型可以简写为unsigned  

unsigned 后面不加其他类型说明意味着是unsigned int


char 有三种不同的类型： plain char,  unsigned char,  signed char


整型值的表示


无符号型中，所有的位都表示数值。定义一种类型使用8位表示，那么这种类型的unsigned型可以取值0到255

c++标准并未定义signed类型如何用位来表示，而是由每个编译器自由决定如何表示signed类型
表示signed整型类型最常见的策略是用其中一个位作为符号位。
符号位为1，值就为负数；符号位为0，值就为0或正数

一个signed整型取值是从-128 到127

整型的赋值

对象的类型决定对象的取值

对于unsigned类型来说，编译器必须调整越界值使其满足要求。编译器会将该值
对unsigned类型的可能取值数目求模，然后取得求值


对于unsigned类型来说，负数总是超出取值范围。unsigned类型的对象可能永远不会保存负数。
c++中，把负值赋值给unsigned对象是完全合法的，其结果是该类型的取值个数求模后的值。

当将超过取值范围的值赋值给signed类型时，由编译器决定实际赋的值


2.1.2  浮点数


类型 float,double,long double


对于实际的程序来说，float类型精度通常是不够的---float型只能保证6位有效数字，
而double型至少可以保证10位有效数字，能满足大多数计算的需要


建议：实用内置算术类型


2.2 字面值常量


整型字面值规则

定义字面值整数常量可以实用一下三种进制的任何一种：十进制，八进制，十六进制

字面值整数常量的类型默认为int或long类型


定义长整型时，应该使用大写字母L。


没有short类型的字面值常量


浮点数字面值规则

通常可以用十进制或科学计数法来表示浮点字面值常量。

默认的浮点字面值常量为double类型

布尔字面值和字符字面值


单词true和false是布尔型的字面值；

bool test = false;

可打印的字符型字面值通常用一对单引号来定义


‘a’  这些字面值都是char类型的。
在字符字面值前加L就能够得到wchar_t 类型的宽字符字面值，如  L‘a’



非打印字符的转义序列


有些字符是不可打印的。不可打印字符实际上是不可显示的字符

不可打印字符和特殊字符都用转义字符书写。转义字符都以反斜线符号开始

换行符  \n
水平制表符  \t
纵向制表符   \v
退格符   \b
回车符   \r
进纸符  \f
报警(响铃)符  \a
反斜线   \\
疑问号   \?
单引号  \'
双引号  \"

我们可以将任何字符表示为一下形式的通用转义字符：   \ooo


字符‘\0’ 通常表示"空字符(null character)",我们将会看到它有非常特殊的意义


字符串字面值


字符串字面值是一串常量字符

字符串字面值常量用双引号括起来的零个或多个字符表示。不可打印字符表示成相应的转义字符

为了兼容C语言，c++中所有的字符串字面值都由编译器自动在末尾添加一个空格字符

宽字符串字面值是一串常量宽字符，同样以一个宽空字符结束


字符串字面值的连接

两个相邻的仅由空格、制表符或换行符分开的字符串字面值(或宽字符串字面值)
可以连接成一个新字符串字面值。


多行字面值

处理长字符串有一个更基本的方法：在一行的末尾加一反斜线符号可将此行和下一行当做同一行处理

注意反斜线符号必须是该行的尾字符----不允许有注释或空格符。

后继行首的任何空格和制表符都是字符串字面值的一部分

长字符串字面值的后继才不会有正常的缩进


建议：不要依赖未定义的行为

2.3  变量

1.使用已命名对象执行运算并输出每次计算
2.使用控制流结构，当某个条件为真时重复执行一系列程序语句



value,pow,result,cnt都是变量，可以对数值进行存储，修改和查询

for循环使得计算过程重复执行pow次


关键概念：强静态类型

c++是一门静态类型语言，在编译时会作类型检查

在c++中，操作是否合法是在编译时检查的

2.3.1  什么是变量
