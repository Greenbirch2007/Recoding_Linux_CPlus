


第１１章　c＋＋程序设计


c＋＋语言是对ｃ语言的扩展和超集，因此同时支持面向过程和面向对象的泛型

１０．１　c++程序基础


c++程序基础包括数据类型(基本内置类型，复合类型)，输入输出类型，语句，函数以及类等


１０．１．１　　数据类型

１．基本数据类型

2.　常量和变量

字面值常量

布尔型字面常量为false,true

整型字面值默认为int了那些个，可以加后缀"u"或"U"表示无符号int型


浮点型字面值默认是double类型

字符型字面值用一对单引号括起来，字符串常量由一对双引号括起来
２．　左值和右值


３．　定义常量

可以用宏定义和const定义常量

#define SZ 100
const int Size=100;

3. 复合数据类型

与c兼容

４．引用和指针

引用为对象提供了另一个名字(别名)，通过将声明符"&d"的形式
来定义引用类型，其中"d"是声明的变量名


引用必须用对象进行初始化，用字面值或表达式初始化引用编译时会博阿错

不同于变量的定义，引用必须在定义时初始化

引用提供了与指针相同的能力，但比指针更直观


"&""*"的作用与位置相关

int a;
int &rfa= a; //rfa为引用
int *p; // p为指针变量
p = &a; //将变量a的地址赋值给ｐ
*p=10; // 将p指向的变量的值改为１０
int &rfp=*p; // rfp为引用

cout <<a<< '\t'<< rfa<< '\t' <<*p << '\t' <<frp<<endl; // 输出４个１０

int *&r=p; // r为指针p的引用
*r= 20; // 等同于*p =20


引用与指针不同，

１．不存在空引用。引用必须连接到一个合法的对象
２．一旦引用被初始化为一个对象，就不能再引用另一个对象，指针指针可以指向另一个对象
３．引用必须在创建时被初始化。指针可以不初始化

１０．１．２　运算符，表达式和语句

１０．１．３　基本输入输出


c++多输赢iostream的io六库

＃include<iostream>

1.输出


cout <<

需要换哈昂时用cout<endl.符号endl的功能是换行，并清除输出缓存区

一般情况下，数据以默认的格式输出

２．输入

>> 

3.格式控制

精度，宽度

n=cout.precision();
m=cout.width();


cout.precision(4);
cout.precision(10)'

10.1.5 


函数，库函数和自定义函数




return_type function_name(parameter list)
{
	body of function;
}


struct tm {
int tm_src;


2.函数调用

函数名(实参表)；


time_t seconds;
time(&seconds); // second = time(NULL);




程序运行中进行函数调用时，程序的控制流转移到被调用函数。
被调用函数执行已经定义的任务，当return语句被执行，或到达函数的结束括号时，
会把程序的控制流再转移给调用者

调用函数时，传递所需参数。调用者需要提供实参，每个实参是一个变量或表达式，且
实参的个数与类型要与被调用函数定义时的参数(称为形参)个数和类型匹配


c++中函数调用时有两种参数传递方式：值传递和引用传递，分别称为值调用和引用调用

在值调用方式下，函数在被调用以前，形参变量并不占用内存单元，当函数被调用时，
才为形参变量分配存储单元，并将相应的实参变量的值复制到形参变量单元中
被调用函数在执行过程修改变量的值并不影响参数变量的值


在引用调用方式下，本质上是将实参的地址传给形参，在被调用函数中通过间接访问方式访问实参
数据，可将形参看做实参的别名，在被调用函数中对形参的访问实质上就是对实参的访问

void swap2(int &pa, int &pb)
{
	int temp =pa;
	pa=pb;
	pb = temp;
}


若有调用swap2(x,y),则swap2函数执行后实参x和y的值被交换

引用调用方式下可以避免复制实参的值带来的时空资源开销


３．内联函数

定义函数时，在“返回类型　函数名(参数表列)”　之前加上inline使之成为内敛函数，
即"inline 返回类型　函数名(参数表列)"

对于内联函数，编译器是将其函数体放在调用该内联函数的地方，不存在普通函数
调用时栈记录的创建和释放开销


注意

１．在一个文件定义的内联函数不能在另一个文件中使用，它们通常放在头文件中共享
２．内联函数应该简洁，只有几个语句，如果语句较多，不适合定义为内联函数
３．内联函数体中不能有循环语句，if语句或switch语句，
否则函数定义时即使有inline关键字，编译器也会把该函数作为非内联函数处理

４．内联函数要在函数被调用之前声明


４．　函数的重载

ｃ++中，当有一组函数完成相似功能时，函数名允许重复使用，编译器根据参数表中的参数
的个数或类型来判断调用哪一个函数，这就是函数的重载。对于重载函数，只要其参数表中参数
个数或类型不同，就视为不同的函数。


int max(int x,int y)
{
	return (x>y)>x:y;
}

double max(double a, double b)
{
	if(a>b)return a;
	else return b;
}

char *max(char *s1, char *s2)
{
	if(strcmp(s1,s2)>0) return s1;
	else return s2;
}


上面３个名称为max的函数，它们的参数和返回值类型都不同
在程序中如有对max函数的调用，编译器将根据参数形式进行匹配，如果找不到
对应参数形式的函数定义，编译器给出错误消息

重载函数时，要注意
1. 避免函数名字相同，但功能完全不同的情形
２．函数的形参变量名不同不能作为函数重载的依据
３．c++中不允许函数名相同，形参个数和类型也相同而返回值不同的情形，
否则编译时会出现函数重复定义的错误
４．　调用重载的函数时，如果实参类型与形参类型不匹配，编译器会自动
进行类型转换。如果转换后仍然不能匹配到重载的函数
则会产生一个编译错误

１０．１．５　类与对象

具有相同或相似性质的对象的抽象就是类。因此，对象的抽象是类，类的具体化就是对象，
也就是说类的实例是对象。类具有属性，它是对象的状态的抽象，用数据结构来描述类的属性
类具有操作，它是对象的行为抽象，用操作名和实现该操作的方法来描述


１．　类

class Name{
	public:类的公有接口
	private:
	私有的成员函数
	私有的数据成员定义};

类的定义由类头和类体两部分组成。类头由关键字class开头，然后类名，
其命名规则与一般标识符的命名规则一致。类体放在一对花括号中，类的定义

也是一个语句，所以要有分号结尾，否则会产生编译错误

类体定义了类的成员，它支持如下两种类型的成员
１．　数据成员。它们指定了该类对象的内部表示
2. 成员函数。　它们指定该类的操作


类成员有３种不同的访问权限
1.公有(public)：成员可以在类外访问
2.私有(private):成员只能被该类的成员函数访问
3. 保护(protected):成员只能被该类的成员函数或派生类的成员函数访问


数据成员通常是私有的；　成员函数通常有一部分是公有的，一部分是私有的。

公有的成员函数可在类外被访问，也称为类的接口

const int STACK_SIZE=100;
class Stack{
	int top; // 数据成员：栈顶指针
	int buffer[STACK_SIZE];　// 数据成员：栈空间

public:
	Stack(){top=0;}
	int length(){ // 成员函数：返回栈中元素的数目
	return top;
}	

bool push(int element){ // 成员函数：元素element入栈
	if(top == STACK_SIZE){
	cout << "Stack is overflow !\n";
return false;
}

else {
	buffer[top] = element;
	top++;
	return true;
}
}

	bool pop(int &e);
};

类的成员函数通常在类外定义，

返回类型　类名:: 函数名(形参表)
{
	函数体
}

双冒号"::" 是域运算符，主要用于类的成员函数的定义


bool Stack::pop(int &e)
{
	//成员函数:弹栈并由参数带回栈顶元素
	if(top==0){
	cout<< "Stack is empty\n";
	return false;
}
else{
	e = buffer[top-1];
	top--;
	return true;
}
}


在c++中，允许在结构体(Struct)和共用体(Union)中定义函数，它们具有类的功能

与class不同的是，结构体和共用体成员的默认访问控制为public.
一般情况下，应该用class来描述面向对象概念中的类


２．　对象


类是用户定义的数据类型(不占内存单元)，它存在与静态的程序中(即运行前的程序)

而动态的面向对象程序(即运行中的程序)则由对象构成，程序的执行是通过对象之间相互
发送消息来实现的，对象是类的实例(占内存单元)


(1) 对象的创建

定义了类之后，就可以定义类类型的变量，类的变量称为对象


Stack s1;  //创建一个Stack类的对象
Stack s2[10]; //创建由对象数组表示的10个Stack类对象


通过new操作创建的对象称为动态对象，其存储空间在内存的堆区。
动态对象用delete操作撤销


Stack *p;
p =new Stack;
delete p;


(2) 对象的操作

对于创建的一个对象，需要通过调用对象类中定义的成员函数来对它进行操作。

采用 对象名.成员函数名(实参表)

或　指向对象的指针->成员函数名(实参表)biasohi 

class A{
	int x;
public:
	void f(){
	cout << "f() is called." << endl;
	};
	void g(){
	cout << "g() is called." << endl;
};

};


int main(void)
{
	A e1;
	el.f();
	el.g();
	A *p;
	p = new A; // 创建A类的一个动态丢下，用p指向该对象
	p-> f();
	p->g();
	return 0;
}


(3) 构造函数

程序运行时创建的每个对象只有在初始化后才能使用。对象的初始化包括初始化对象的
数据成员以及为对象申请资源等。
对象消亡前，往往也需要执行一些操作，如归还对象占有的空间


c++中定义了一种特殊的初始化函数，称之为析构函数。

当对象被创建时，构造函数自动被调用。
构造函数的名字与类名相同，它没有返回类型和返回值。当对象创建时，会自动
调用构造函数进行初始化

class Stack{
	int top;// 数据成员：栈顶指针
	int buffer[STACK_SIZE]; // 数据成员:栈空间
public:
	Stack(){top=0;} //构造函数
}

Stack s1; //创建对象s1

注意：对构造函数的调用是对象创建过程的一部分，对象创建之后就不能再调用构造函数了

构造函数也可以重载，其中，不带参数(或所有参数都有默认值)的构造函数称为默认构造函数

对于常量数据成员和引用数据成员(某些静态成员除外)，不能在声明时进行初始化，
也不能采用赋值操作对它们进行初始化。


class A{
	int x;
public:
	A(){
	x=0;
可以在定义构造函数时，在函数头和函数体之间加入一个对数据成员进行初始化的表来实现


class A{
	int x;
	const int y;
	int z;
public:
A():z(x),y(10) // 数据成员初始化表
{
	x=0;
}



(4) 析构函数

当对象销毁时，会自动调用析构函数进行一些清理工作。~
析构函数也与类同名，但在前面有一个"~"，析构函数也没有返回类型和返回值》
析构函数不带参数，不能重载



class myString{
	char *str; //数据成员：存储串空间的首地址的指针变量
public:
	myString(){ //构造函数
		str=NULL;
}
myString(const char *p) { //构造函数
	str = new char[strlen(p)+1];// 申请空间
	strcpy(str,p);}
~myString(){ // 析构函数
	delete []str;//释放空间
	str = NULL;
}
	int length(){return strlen(str);}
};


3.静态成员

可能需要一个或多个公共的数成员能够被类的所有对象共享。
在C++中，可以定义静态(Static)


类名::成员函数名(实参表)


4. this 指针


c++中定义了一个this指针，用它指向类的对象，
this指针是一个隐含的指针，不能被显式声明


定义一个类A 及其两个对象a,b

class A{
public:
	void f();
	void g(int i){x=i;f();}
private:
	int x,y,z;
} A a,b;


对于一个类的成员函数，它如何直到是对哪一个对象进行操作？

每个成员函数都拥有一个this指针，this是一个形参，一个局部变量，存在
于类的非静态成员函数中(仅能在类的成员函数中访问)，
this局部于某一个对象，它指向调用该函数的对象



类A的成员函数ｇ的实际形式为:


void g(A*const this,int i){this->x =i,this->f();}


对于调用a.g(5),它实际被编译成A::g(&a,5),
这样成员函数通过this指针就能知道对哪个对象进行访问了


５．　友元


根据数据保护的要求，不能在一个类的外部访问该类的数据成员，c++用private访问控制
来保证这一点，对private数据成员的访问通常通过该类提供的public成员函数来进行

在C++的一个类定义中，可以指定某个全局函数，某个其他类或某个其他类的成员函数
来直接访问该类的私有(private)和保护(protected) 成员，
它们分别称为友元函数，友元类，友元类函数，通称友元


class A:
{
	friend void func(); // 友元函数
	friend class B; // 友元类
	friend void C::f(); //友元类成员函数，假定f()是类C的成员函数
}

友元的作用是提高程序设计的灵活性，是数据保护和对数据的存取效率之间的折中方案


１０．２　继承与多台


1. 继承


class 派生类名:访问权限　基类名
{
	// 派生类的类体
}

基类数据的初始化要通过基类的构造函数，而且它要在派生类数据之前初始化，
所以基类构造函数在派生构造函数的初始化表中调用


派生类名(参数表１):基类名(参数表2)


定义一个元素顺序存储的线性表类，派生出队列和栈


class LinearList{
	int *buffer;
	int size;
public:
	LinearList(int num){
		size = (num>0)>num:10;
		buffer = new int[size];
}
	~LinearList(){delete []buffer;}
	bool insert(int x,int i); //在线性表第i个元素后插入新元素x
	bool remove(int &x,int i);
	int element(int i) const;
	int search(int x) const;
	int length() const;
}

class Queue:private LinearList

public:
	bool enQueue(int x)
	{return insert(x,length());}
	bool deQueue(int &x)
	{return remove(x,1);}
}

class Stack:private LinearList{
public:
	bool push(int x)
	{return insert(x,1);}
	bool pop(int &x)
	{return remove(x,1);]

}


2. 多态

一个接口，多种方法

程序在运行时才决定所调用的函数


在c++中，动态绑定是通过虚函数来实现。虚函数的定义很简单，
只要在成员函数原型前加一个关键字virtual即可。
如果一个基类的成员函数定义为虚函数，
那么它在所有派生类中也保持为虚函数，即使在派生了中省略了virtual关键字。
要达到动态绑定的效果，基类和派生类的对应函数不仅名字相同，
而且返回类型，参数个数和类型也必须相同


仅定义了函数而没有函数实现的虚函数称为纯虚函数。定义纯虚函数的方法
是在虚函数参数表右边括号加一个"=0"的后缀


virtual void method(void) =0;

含有纯虚函数的类，称为抽象类。c++不允许用抽象了创造对象，
它只能被其他类继承

对虚函数的限制是:只有类的成员函数才可以是虚函数；静态成员函数
不能是虚函数；构造函数不能是虚函数，
析构函数常常为虚函数


#include<iostream.h>
#include<math.h>

class Figure{
public:
	virtual double getArea()=0;
};

class Rectangle:public Figure{

protected:
	double height;
	double width;


public:
	Rectangle(){};
	Rectangle(double height,double width){
		this->height = height;
		this->width = width;
	}
	double getArea(){
	return height height * width;
}
};

class Square:public Rectangle{
public:
	Square(double width){
		this-> height = this->width=width;
}
};

class Triangle:public Figuare{
// 类Triagle是Figure的派生类
	double la;
	double lb;
	double lc;
public:
	Triangle(double la,double lb,double lc){
		this->la =la ;this->lb=lb; this->lc=lc;
		}
	double getArea(){
		double s= (la+lb+lc)/2.0;
		return sqrt(s*(s-la)*(s-lc));
}
};

void main(){

Figure*figures[3]={
	new Triangle(2,3,3),new Rectangle(5,8),new Square(5)};

	for(int i=0;i<3;i++){
		cout<< "figures["<<"]area" << (figures[i])->getArea() << endl;
}
}

10.3 异常处理

1.终止程序
2.返回一个表示错误的值
３．返回一个合法值，让程序处于某种非法的状态
４．　调用一个预先准备好在出现"错误"的情况下的函数


try,catch,finally,throw

try,一般放入程序或函数的工作代码(出错时发生异常的代码)
catch,是程序发生异常后的出错代码，每个catch块指定捕获和处理一种异常
finally块中放着不论是否出错都需要处理的ｄｉａｍ
throw用来声明函数可以抛出的异常和程序检测到出错时用来抛出的一个异常对象

try{
	//
}

catch(Exception1 e){
}

finanlly{}


异常被抛出后，一旦被异常处理器收到就被销毁。异常处理由关键字catch引导，
一般紧跟在try块之后，


如果一个异常信号被抛出，异常处理中第一个参数与异常抛出对象相匹配的函数将捕获
该异常信号，然后进入相应的catch语句，执行异常处理代码


函数的所有潜在异常类型随关键字throw插入在函数说明中

void f() throw();

传统函数声明void f();意味着函数可能抛出任何一种异常。
如果声明void f() throw(); 则意味着不会抛出异常


#include<iostream>

using namespace std;

int divide(int x,int y)
{ if(y==0) throw 0;
	return x/y;
} // end of divide

void test()
{
	int a,b;
	try {
		cout << "请输入两个整数a和b(用于计算a除以b的商):";
		cin >> a>> b;
		int k = divide(a,b);
		cout << a<< "/"<<b<<"=" <<k;
}

catch(int){
	cout << "重新输入整数a和b(b的值不能为0):";
	cin>>a>>b;
	ink k= divide(a,b);
	cout<< a<<"/"<<b<< "="<<k<<endl;
｝

}// end of test

int main(void)
{
	try{
		test();
} catch(int){ cout << "请重新运行程序"<<endl;}

return 0;
}// end of main


10.4 标准库

c++标准库可以分为标准函数库和类库两部分



标准函数库包含了所有的c标准库，有输入输出，字符串和字符处理，数学运算，时间，
日期和本地化，动态分配和其他处理等，为了支持类型安全，做了一定的添加和修改


面向对象类库定义了一些常见的类，如i/o类，string类，数值类和STL的容器类
算法，函数对象，迭代器，分配器，以及异常处理类

１０．４．１　i/o流库


1. 抽象流基类
ios为流基类

2.输入流类

istream,ifstream, istream,withassign ,istrstream

3. 输出流类

ostream, ofstream, ostream_withassign, ostrstream

4.输入输出流类

iostream,fstream,strstream,stdiostream

5.缓冲流类

streambuf,filebuf,strstreambuf,stdiobuf


6.预定义流初始化类


cin,
cerr
clog
cout
可以利用无参的构造函数打开文件流，然后调用open

ofstream outfile;
outfile.open("outfile",iosmode);

也可调用带参数的构造函数，指定文件名和打开方式

ofstream outfile("outfile",iosmode);


在文件操作结束时可以用close()成员函数关闭该文件

outfile.close()






