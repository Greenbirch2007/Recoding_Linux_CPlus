


第１１章　c＋＋程序设计


c＋＋语言是对ｃ语言的扩展和超集，因此同时支持面向过程和面向对象的泛型

１０．１　c++程序基础


c++程序基础包括数据类型(基本内置类型，复合类型)，输入输出类型，语句，函数以及类等


１０．１．１　　数据类型

１．基本数据类型

2.　常量和变量

字面值常量

布尔型字面常量为false,true

整型字面值默认为int了那些个，可以加后缀"u"或"U"表示无符号int型


浮点型字面值默认是double类型

字符型字面值用一对单引号括起来，字符串常量由一对双引号括起来
２．　左值和右值


３．　定义常量

可以用宏定义和const定义常量

#define SZ 100
const int Size=100;

3. 复合数据类型

与c兼容

４．引用和指针

引用为对象提供了另一个名字(别名)，通过将声明符"&d"的形式
来定义引用类型，其中"d"是声明的变量名


引用必须用对象进行初始化，用字面值或表达式初始化引用编译时会博阿错

不同于变量的定义，引用必须在定义时初始化

引用提供了与指针相同的能力，但比指针更直观


"&""*"的作用与位置相关

int a;
int &rfa= a; //rfa为引用
int *p; // p为指针变量
p = &a; //将变量a的地址赋值给ｐ
*p=10; // 将p指向的变量的值改为１０
int &rfp=*p; // rfp为引用

cout <<a<< '\t'<< rfa<< '\t' <<*p << '\t' <<frp<<endl; // 输出４个１０

int *&r=p; // r为指针p的引用
*r= 20; // 等同于*p =20


引用与指针不同，

１．不存在空引用。引用必须连接到一个合法的对象
２．一旦引用被初始化为一个对象，就不能再引用另一个对象，指针指针可以指向另一个对象
３．引用必须在创建时被初始化。指针可以不初始化

１０．１．２　运算符，表达式和语句

１０．１．３　基本输入输出


c++多输赢iostream的io六库

＃include<iostream>

1.输出


cout <<

需要换哈昂时用cout<endl.符号endl的功能是换行，并清除输出缓存区

一般情况下，数据以默认的格式输出

２．输入

>> 

3.格式控制

精度，宽度

n=cout.precision();
m=cout.width();


cout.precision(4);
cout.precision(10)'

10.1.5 


函数，库函数和自定义函数




return_type function_name(parameter list)
{
	body of function;
}


struct tm {
int tm_src;


2.函数调用

函数名(实参表)；


time_t seconds;
time(&seconds); // second = time(NULL);





