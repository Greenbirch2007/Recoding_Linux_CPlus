
5.5  函数参数

参数是函数间进行数据交换的主要方式。c++中，函数之间传递参数有传值和传地址的两种
方式。此外，c++还提供了默认参数机制，可以简化复杂函数的调用


5.5.1  参数的传递方式

1. 传值是将实参值的副本传递(拷贝)给被调用函数的形参

由于传值方式是将实参的值复制到形参中，因此实参和形参是两个不同的变量，
有各自个存储空间，函数形参可以看做是函数的局部变量。传值的最大好处是函数
调用不会改变调用函数实参变量的内容，可避免不必要的副作用


2.传地址

有时确实需要通过函数调用来改变实参变量的值，或通过函数调用返回多个值(return语句
只能返回一个值)，这时仅靠传值方式是不能达到目的的


swap函数的参数传递采用用了传值方式，函数调用仅仅将实参变量a和b的值拷贝给了
形参变量x和y,因此调用swap(a,b)时仅仅交换了两个形参变量x和y的值，而相应实参变量并没有交换


正确的做法是传入两个指向实参变量的指针，简介地交换它们的值

在函数swap中，交换的是指针变量px和py所指向的内容，因此，变量a和b的值被交换


穿指针属于显式传递地址。因此尽管传递指针可以达到目的，但传递方式略显笨拙，而且不直观

c++提供了一种引用机制(可以将其看成变量的别名)，它的本质仍然是地址。
通过引用传递函数参数属于隐式传地址，当参数声明为引用，在函数引用时，编译器会自动
讲实参的地址传给被调用函数。

使用传递引用改写上的

注意，函数引用参数仅在函数定义时说明，而带引用参数的调用形式与值参数相同。

在c++中，当函数参数需要传递地址时，建议使用引用来代替指针(指针方式属于c语言风格)
引用更加直观：

引用参数的应用场景：
(1)要从函数中返回多个值
(2) 通过函数调用要改动实参值
(3) 传递地址可以节省大量数据所需的内存空间和时间


当函数参数为大多数类型，而这类对象通常包含有多个数据，当他们作为值参数传递时，
实参对象拷贝给形参变量(对象中的每个数据都要分别拷贝到形参中)将要
占用许多空间并消耗时间。

好的程序设计实践通常将大数据类型参数，如类类型参数，作为引用参数，这样将
节省参数传递的实践和空间

也要注意实用引用(或指针)所带来的副作用。
传值调用的最大好处是函数调用不会改变实参变量的内容，而使用引用(或指针)
可能由于忽略而导致不该修改的实参变量在函数调用时被修改

保护实参不被修改的办法是实用const引用参数，具体做法是使用关键字const来修饰引用参数

5.5.2  默认参数

在c++中，可以为形参指定默认值，在函数调用时没有指定与形参相对应的实参时就自动
使用默认值。默认参数可以简化复杂函数的调用


默认参数通常在函数名第一次出现在程序中的时候指定，如在函数
原型中指定默认参数参数值指定默认参数的方式从语法上看与变量初始化相似

如果一个函数中有多个参数，则默认参数从右到左逐个定义

c++中引入默认参数使得程序员能够处理复杂的问题。
使用默认参数，程序员只需要记住针对确切情形有意义的参数，不需要指定常见情况下使用的参数

5.6  函数重载

在c中，编写函数时必须确保函数名唯一。

函数重载，就是能用同一个函数名字在不同类型上做类似的操作就会方便很多

c++将根据参数类型来判断应调用哪个myMax()函数



5.7 内联函数

c++引入内联(inline)函数的原因是用它来取代c中的预处理宏函数。
内联函数和宏函数的区别在于，宏函数是由预处理器对宏进行替换，而
内联函数是通过编译器实现的，因此内联函数是真正的函数，只是在调用的
时候，内联函数像宏函数一样展开，所以它没有一般函数的参数压栈和退栈操作，减少了调用
开销。内联函数比普通函数执行效率更高


在c++中使用inline关键字来定义内联函数。inline关键字放在函数定义(声明)中函数类型之前。
不过，编译器会将在类的说明部分定义的任何函数都认定为内联函数，即使他们没有用inline说明

5.8 递归函数
5.9 变量的生存周期

在c++中变量有一下两种生存周期：
（1） 变量由编译程序在编译时给其分配存储空间(称为静态存储分配)，并在程序执行过程中始终存在。
这类变量的生存周期与程序的运行周期相同，当程序运行时，该变量的生存周期随即存在，程序运行
结束，变量的生存周期随即终止

（2） 变量由程序在运行时自动给其分配存储空间(称为自动存储分配)，这类变量为函数(或块)中
定义的自动变量。它们在程序执行到该函数(或块)时被创建，在函数(或块)执行结束时
释放所占用的空间


第6章 类和对象


类是面向对象程序设计的核心，是通过抽象数据类型方法实现的一种用户自定义数据类型，
它同时包含了数据和对象进行操作的函数。
利用类可以实现数据的封装和隐藏

类是对某一类对象的抽象，而对象是某一种类的实例，类和对象是密切相关的。


没有脱离对象的类，也没有依赖于类的对象

6.1 类的定义

类是一种用户定义的复杂数据类型，它是将不同类型的数据和与这些数据相关的操作封装
在一起的集合体。
c++里类概念的目标就是为程序员提供一种简历新类型的工具，
使这些新类型的使用能够像内部数据类型一样方便

6.1.1 类的定义